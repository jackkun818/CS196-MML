using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Threading;
using static System.Net.Mime.MediaTypeNames;

namespace crs.game.Games
{
    /// <summary>
    /// Explanation of spatial digital search.xaml Interaction logic
    /// </summary>
    public partial class Explanation of spatial digital search : BaseUserControl
    {
        private List<int> numbers;
        private int lastClickedNumber;
        private int maxConsecutiveNumber; // Record the maximum value of the longest continuous string of numbers
        private Brush defaultButtonBackground; // Storage button default background color
        public Action GameBeginAction { get; set; }

        public Func<string, Task> VoicePlayFunc { get; set; }
        public Explanation of spatial digital search()
        {
            InitializeComponent();

           
           
            lastClickedNumber = 0; // Initialize to 0, indicating that no click
            maxConsecutiveNumber = 0; // Initialize the maximum continuous number string to 0
            defaultButtonBackground = Brushes.White; // Change place:---》Set the default background color to change gray to white
            InitializeNumberGrid();

            this.Loaded += Explanation of spatial digital search_Loaded;


        }

        private void Explanation of spatial digital search_Loaded(object sender, RoutedEventArgs e)
        {
            // Ensure key presses and focus behavior when page loads
            Button_2_Click(null, null);
            this.Focus();  // Make sure the focus is on the window
        }

        private void InitializeNumberGrid()
        {
            numbers = Enumerable.Range(1, 25).ToList(); // Change place: Modify to 1 to 4--》1 to 25,existxamlIn this I adjusted the size position of the square generated by the number, and divided him five elements and five columns for him to distribute it.
            Random rand = new Random();
            numbers = numbers.OrderBy(x => rand.Next()).ToList(); // Chaotic order

            foreach (var number in numbers)
            {
                Button button = new Button
                {
                    BorderThickness = new Thickness(0),//Change place: Change size to 0
                    Content = (number <= 5) ? number.ToString() : "", // Change place---》Only display numbers from 1 to 5
                    FontWeight = FontWeights.Bold, // Set font bold
                    FontSize = 32,
                    Margin = new Thickness(5),//Change place: Change the size to 5
                    Style = CreateCustomButtonStyle(),//Change place:null---》Changed toCreateCustomButtonStyleThis button format defined by yourself, add gray edges, remove hover feedback, etc., this is defined below
                    Background = defaultButtonBackground // Set the initial background color of the button
                };

                button.Click += NumberButton_Click;
                NumberGrid.Children.Add(button);
            }
            Run textPart1 = new Run("Please find out: ")
            {
                Foreground = new SolidColorBrush(Colors.Black)
            };

            // Create and add orange text
            Run textPart2 = new Run((maxConsecutiveNumber + 1).ToString())
            {
                Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FFB346"))
            };

            // Clear the current one Inlines
            tipblock.Inlines.Clear();

            // Add two parts to TextBlock
            tipblock.Inlines.Add(textPart1);
            tipblock.Inlines.Add(textPart2);
        }
        private void Window_MouseMove(object sender, MouseEventArgs e)//Bind custom mouse cursor and default mouse cursor
        {

            Point position = e.GetPosition(this);
            Canvas.SetLeft(CustomCursor, position.X - (CustomCursor.Width / 2));
            Canvas.SetTop(CustomCursor, position.Y - (CustomCursor.Height / 2));
            // Get Canvas The boundary of
            double canvasLeft = Canvas.GetLeft(CustomCursor);
            double canvasTop = Canvas.GetTop(CustomCursor);
            double canvasWidth = this.ActualWidth;
            double canvasHeight = this.ActualHeight;

            // Get CustomCursor width and height
            double cursorWidth = CustomCursor.Width;
            double cursorHeight = CustomCursor.Height;

            // if CustomCursor More than Canvas boundaries, cut
            if (canvasLeft + cursorWidth > canvasWidth)
            {
                Canvas.SetLeft(CustomCursor, canvasWidth - cursorWidth); // Limit to the right boundary
            }
            if (canvasTop + cursorHeight > canvasHeight)
            {
                Canvas.SetTop(CustomCursor, canvasHeight - cursorHeight); // Limit to the lower boundary
            }
            if (canvasLeft < 0)
            {
                Canvas.SetLeft(CustomCursor, 0); // Limit to the left border
            }
            if (canvasTop < 0)
            {
                Canvas.SetTop(CustomCursor, 0); // Limit to the upper boundary
            }

            // if CustomCursor Exceeded Canvas Range, cut out the excess
            Rect clipRect = new Rect(0, 0, canvasWidth, canvasHeight);
            CustomCursor.Clip = new RectangleGeometry(clipRect);  // Crop areas using rectangles
        }
        private void OnGameStart()//Call custom mouse cursor function
        {
            this.Cursor = Cursors.None; // Hide the default cursor
            CustomCursor.Visibility = Visibility.Visible; // Show custom cursor
            MouseMove += Window_MouseMove; // subscription MouseMove event
            CustomCursor.Width = 65; // Adjust to the width you want
            CustomCursor.Height = 65; // Adjust to the height you want
        }
        private async void NumberButton_Click(object sender, RoutedEventArgs e)
        {
            Button clickedButton = sender as Button;
            int clickedNumber = Convert.ToInt32(clickedButton.Content);

            if (clickedNumber < maxConsecutiveNumber + 1)
                return;
            if (maxConsecutiveNumber == 0 && clickedNumber == maxConsecutiveNumber + 1)
            {
                maxConsecutiveNumber++; 
                clickedButton.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FFB346"));
                clickedButton.Foreground = Brushes.White; // Change place---》Set the foreground color to white
            }
            else
            {
                if (clickedNumber == maxConsecutiveNumber + 1)
                {
                    maxConsecutiveNumber++;
                    clickedButton.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FFB346"));
                    clickedButton.Foreground = Brushes.White; // Change place---》Set the foreground color to white

                    // Check if all numbers have been clicked
                    if (maxConsecutiveNumber == 5) // Change place---》 modified to five numbers displayed, 4---》5
                    {
                    
                        FeedbackImage.Source = new BitmapImage(new Uri("./pic/NUQU/right.png", UriKind.Relative)); //Change the place: Change the correct answer to the picture to display, set the correct picture,Bundle“Congratulations on getting right”Replace
                        FeedbackImage.Visibility = Visibility.Visible;
                        OkButton.Visibility = Visibility.Visible;
                        tipblock.Visibility = Visibility.Collapsed;//Change place---》If the answer is correct, please find the text of the number
                    }
                }
                else
                {
                    FeedbackImage.Visibility = Visibility.Visible; //Change place---》The correct answer is displayed only if the answer is correct, the correct answer is correct. You can read it herexamlFile, I separate the correct answer and the text box that asks to find the number.
                    clickedButton.Background = Brushes.Black; // Set button background to black

                    FeedbackImage.Source = new BitmapImage(new Uri("./pic/NUQU/error.png", UriKind.Relative)); // Change place: Change the wrong answer to the picture display, set the wrong picture, and“Sorry to answer wrong”Replace
                    FeedbackImage.Visibility = Visibility.Visible;

                    // Waiting for 0.Restore color in 5 seconds
                    await Task.Delay(500); // Wait 500 milliseconds
                    clickedButton.Background = defaultButtonBackground; // Restore button background as default color
                    await Task.Delay(500); // Wait 500 milliseconds

                    FeedbackImage.Visibility = Visibility.Collapsed;
                    clickedButton.IsEnabled = true; // Re-enable button
                    tipblock.Visibility = Visibility.Visible;
                }
            }
            lastClickedNumber = clickedNumber;
            Run textPart1 = new Run("Please find out: ")
            {
                Foreground = new SolidColorBrush(Colors.Black)
            };

            // Create and add orange text
            Run textPart2 = new Run((maxConsecutiveNumber + 1).ToString())
            {
                Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FFB346"))
            };

            // Clear the current one Inlines
            tipblock.Inlines.Clear();

            // Add two parts to TextBlock
            tipblock.Inlines.Add(textPart1);
            tipblock.Inlines.Add(textPart2);
        }

        private void OkButton_Click(object sender, RoutedEventArgs e)
        {
            // Related logic for starting answering questions
            OnGameBegin();
        }

        int currentPage = -1;

        private void Button_1_Click(object sender, RoutedEventArgs e)
        {
            currentPage--;
            PageSwitch();
        }

        private void Button_2_Click(object sender, RoutedEventArgs e)
        {
            currentPage++;
            PageSwitch();
        }

        private void Button_3_Click(object sender, RoutedEventArgs e)
        {
            OnGameBegin();
        }
       
        async void PageSwitch()
        {
            switch (currentPage)
            {
                case 0:
                    {
                        Text_1.Visibility = Visibility.Visible;
                        Image_1.Visibility = Visibility.Collapsed;
                        NumberGrid.Visibility = Visibility.Visible;
                        FeedbackImage.Visibility = Visibility.Collapsed;
                        TipBlock1.Visibility = Visibility.Collapsed;
                        tipblock.Visibility = Visibility.Collapsed;
                        TipBlock2.Visibility = Visibility.Collapsed;
                        Button_1.Visibility = Visibility.Collapsed;
                        Button_1.IsEnabled = false;
                        Button_2.Content = "Trial";
                        Button_2.Margin = new Thickness(329, 850, 0, 0);
                        Button_3.Margin = new Thickness(770, 850, 0, 0);
                        NumberGrid.Margin = new Thickness(0, 15, 0, 285); // Adjust the value here
                        MouseMove += Window_MouseMove; // subscription MouseMove event
                        await OnVoicePlayAsync(Text_1.Text);
                    }
                    break;
                case 1:
                    {
                        // Display the second interface of the explanation
                        Text_1.Visibility = Visibility.Collapsed;
                        Image_1.Visibility = Visibility.Collapsed;
                        TipBlock2.Visibility = Visibility.Visible;
                        NumberGrid.Visibility = Visibility.Visible;
                        FeedbackImage.Visibility = Visibility.Visible;
                        tipblock.Visibility = Visibility.Visible;

                        Button_1.Visibility = Visibility.Collapsed;
                        Button_2.Visibility = Visibility.Collapsed;
                        Button_3.Visibility = Visibility.Collapsed;
                        NumberGrid.Margin = new Thickness(0, 74, 0, 226); // Restore the original Margin

                        //LJN, instructing the delegate in the explanation module
                        SetTitleVisibleAction?.Invoke(true);
                        RuleAction?.Invoke("You will see 5 on the screen×There are several digits in the order of 5 squares on the square. Please use the mouse to click on these squares in sequence with the mouse. The faster the better.！");//Add code, call function, display the text under the digital person
                        //LJN
                        OnGameStart();


                    }
                    break;

            }
        }
        //Change place: button custom function code, this is the beginning
        private Style CreateCustomButtonStyle()
        {//Pack a style
            // Create button style
            Style buttonStyle = new Style(typeof(Button));

            // Set background to white
            buttonStyle.Setters.Add(new Setter(Button.BackgroundProperty, Brushes.White));

            // Set shadow effect
            ////LJN,Add shadow effect
            //Effect = new DropShadowEffect
            //{
            //    Color = Colors.Gray,      // Shadow color
            //    BlurRadius = 10,          // Fuzzy radius
            //    ShadowDepth = 5,          // Shadow depth
            //    Direction = 315,          // Shadow direction, angle
            //    Opacity = 0.5             // Shadow Transparency
            //},
            buttonStyle.Setters.Add(new Setter(Button.EffectProperty, new DropShadowEffect
            {
                Color = Colors.Gray,
                BlurRadius = 10,
                ShadowDepth = 5,
                Direction = 315,
                Opacity = 0.5
            }));

            // Custom templates to remove default visual changes when mouse over
            ControlTemplate template = new ControlTemplate(typeof(Button));
            FrameworkElementFactory border = new FrameworkElementFactory(typeof(Border));
            border.SetValue(Border.BackgroundProperty, new TemplateBindingExtension(Button.BackgroundProperty));
            border.SetValue(Border.BorderBrushProperty, new TemplateBindingExtension(Button.BorderBrushProperty));
            border.SetValue(Border.BorderThicknessProperty, new TemplateBindingExtension(Button.BorderThicknessProperty));

            ////LJN,Cancel the length and width setting, keep filling
            //HorizontalAlignment = HorizontalAlignment.Stretch,  // Set horizontal fill
            //VerticalAlignment = VerticalAlignment.Stretch,   // Set vertical fill
            FrameworkElementFactory contentPresenter = new FrameworkElementFactory(typeof(ContentPresenter));
            contentPresenter.SetValue(ContentPresenter.HorizontalAlignmentProperty, HorizontalAlignment.Center);
            contentPresenter.SetValue(ContentPresenter.VerticalAlignmentProperty, VerticalAlignment.Center);

            border.AppendChild(contentPresenter);
            template.VisualTree = border;

            ////LJN,Make the mouse not change when it moves abovebuttonThe color of
            //FocusVisualStyle = null
            // Triggers to ensure that the background remains unchanged while the mouse is hovered
            System.Windows.Trigger isMouseOverTrigger = new System.Windows.Trigger { Property = Button.IsMouseOverProperty, Value = true };
            isMouseOverTrigger.Setters.Add(new Setter(Button.BackgroundProperty, Brushes.White));
            template.Triggers.Add(isMouseOverTrigger);

            // Set the template to style
            buttonStyle.Setters.Add(new Setter(Button.TemplateProperty, template));

            return buttonStyle;
        }
        //The button format definition ends, the change ends


        /// <summary>
        /// Voice playback of explanation content
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns>
        async Task VoicePlayer(string message)
        {
            var voicePlayFunc = VoicePlayFunc;
            if (voicePlayFunc == null)
            {
                return;
            }

            await voicePlayFunc.Invoke(message);
        }
    }
}
